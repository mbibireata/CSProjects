Created testfunc.c in order to manipulate func.c without messing up original.

Original speed: 0.464335
Fastest achieved so far: 0.274395 with parallelizing the O(n^2) loop in func 1
0.266873 achieved by reducing the amount of compare statements issued by the for loop in func 0
0.231624 achieved by adding another omp parallel in func 1
0.229729 achieved by using SIMD in loops where the number of compare statements can be reduced
0.124459 achieved by same optimizations but setting the number of cores to 6 instead of default (successfully completed lab) 
How I beat the 3.5x speedup: 
10 Cores: 0.093203
15 Cores: 0.078589 (6x speedup)

Idea: 
	Use parallel for to iterate different parts of a for loop separately 

	Make for loop do less comparisons, iterate over them fewer times. Run the instructions in the BODY of the for loop in parallel.

	Perform the operations in the for loop (such as functions) only once in the for loop instead of several times over.  


